@page "/joblist"

@using YaVDele.CalculatorGrant.Services.JobServices
@inject IJobRepository _jobRepository
@inject NavigationManager navigationManager

<h3>Volounteer Job List</h3>

@if(jobList == null)
{
    <p><em>Loading...</em></p>
} else
{
    <button class="btn btn-success" @onclick="@AddNewJob">Добавить</button>
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Название</th>
                <th>З/П</th>
                <th>Действие</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in jobList)
            {
                <tr>
                    <td>@job.Id</td>
                    <td>@job.JobName</td>
                    <td>@job.Salary</td>
                    <td>
                        <button class="btn btn-info" @onclick="@(()=> UpdateJob(job))">Изменить</button>
                        <button class="btn btn-danger" @onclick=@(()=> DeleteJobAsync(job))>Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private IEnumerable<VolounteerJobInfo> jobList;
    protected override async Task OnInitializedAsync() => jobList = await _jobRepository.GetJobAsync();

    public void AddNewJob()
    {
        navigationManager.NavigateTo("/addupdatevolounteerjob");
    }

    public void UpdateJob(VolounteerJobInfo job)
    {
        navigationManager.NavigateTo($"/updatejobinfo/{job.Id}");
    }

    public async void DeleteJobAsync(VolounteerJobInfo jobInfo) { 
        await _jobRepository.DeleteJobAsync(jobInfo.Id);
        jobList = await _jobRepository.GetJobAsync();
        StateHasChanged();
    }
}
