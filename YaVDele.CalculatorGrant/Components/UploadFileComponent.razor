@inject FileUpload fileUpload

<div class="container">

    <div class="row">
        <div class="col md-2">
            <div class="mb-3 row">
                <h3>Загрузка:</h3>
                <form @onsubmit="@OnSubmit">

                    <div class="col-auto mb-3 ">
                        <label for="inputFile" class="btn btn-secondary me-1">
                            <InputFile id="inputFile" OnChange="@OnInputFileChange" class="d-none" multiple/>
                            <i class="oi oi-paperclip"></i> Выбрать файлы
                        </label>

                        <button type="submit" class="btn btn-success me-1">
                            <i class="oi oi-cloud-upload"></i> Загрузить
                        </button>

                        <textarea type="text" readonly class="form-control-plaintext" value="@Message" rows="5"/>
                    </div>

                </form>

               @*  <button onclick="@infoStatus">Директория</button>
                <button onclick="@filesInFolder">К-во файлов</button>
                <p>@infoStatus() | @filesCount</p>
                <hr /> *@

            </div>   
        </div>

        <div class="col md-2">
            <FolderVizualizationComponent 
                uploadDirectory="@fileUpload.MainDirInit()"
                @bind-filesInFolder="@fileObjects"></FolderVizualizationComponent>
        </div>
    </div>
    
</div>

@code {
    public string Message;

    IReadOnlyList<IBrowserFile> selectedFiles;
    List<FileObject> fileObjects;
    public string filesCount;

    protected override void OnInitialized() => fileUpload.CheckDirectoryForExistence(fileUpload.MainDirInit());

    public async Task OnSubmit()
    {
        bool isInRightSize = true;     

        if (selectedFiles != null)
        {
            foreach (var file in selectedFiles)
            {
                if (file.Size >= 512000)
                {
                    Message = $"Ошибка. Файл {file.Name} не соотвествует максимальному объёму в 60КБ.\nТекущий размер файла {file.Size / 1024 / 8}КБ.";
                    isInRightSize = false;
                } 
            }

            if (isInRightSize)
            {
                await fileUpload.LoadFiles(selectedFiles);
                countFilesInFolder();
                Message = $"{selectedFiles.Count} файл(ов) успешно загружено. Всего в папке {filesCount} файла(ов)";
            }

            this.StateHasChanged(); 
        } else
        {
            if (Message == null) Message = $"Вы не выбрали файл для загрузки!";
            this.StateHasChanged();
        }

    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} файл(ов) выбрано.";
        this.StateHasChanged();
    }

    public string infoStatus() => fileUpload.MainDirOut();

    public void countFilesInFolder() => filesCount = fileUpload.FileCountInFoleder();
    
}
