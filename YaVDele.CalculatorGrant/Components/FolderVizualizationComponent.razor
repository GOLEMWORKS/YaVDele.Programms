@inject FileUpload fileUpload
@inject FileLogic fileLogic

<h3>Folder Vizualization Component</h3>
<h3>current directory: @uploadDirectory</h3>

<div class="input-group input-group-sm mb-3">
    <div class="btn-group">
        <button class="btn btn-outline-danger"
                type="button"
                @onclick="@((args) => DeleteSelectedFile())"
                >
            <i class="oi oi-trash"></i>
            Удалить
        </button>
        <button class="btn btn-outline-success"
                type="button">
            <i class="oi oi-book"></i>
            Прочитать
        </button>
        <button class="btn btn-outline-primary"
                type="button">
            <i class="oi oi"></i>
            В Exel
        </button>
    </div>

    <i></i>
</div>

<div style="overflow-y: auto; max-height: 300px; border: 1px solid silver; padding-top: 3px;">
    <ul style="list-style-type:none">
        @foreach (var item in getFilesInFolder())
        {
            <li 
            class="li-select-file"
            tabindex="1"
            @onclick="@((args) => SelectFile(item))">@item.FileName</li>
        }
    </ul>
</div>


@code {
    [Parameter]
    [EditorRequired]
    public string uploadDirectory { get; set; }

    [Parameter]
    public List<FileObject> filesInFolder { get; set; }

    [Parameter]
    public EventCallback<List<FileObject>> filesInFolderChanged { get; set; }

    FileObject selectedFileObject = null;

    public List<FileObject> getFilesInFolder()
    {
        List<FileObject> filesInFolder = fileUpload.GetFilesList();
        return filesInFolder;
    }

    void SelectFile(FileObject file)
    {
        selectedFileObject = new FileObject{
                FileName = file.FileName,
                FilePath = file.FilePath
        };
    }

    async Task DeleteSelectedFile()
    {
        if (selectedFileObject != null)
        {
            fileLogic.FileDelete(selectedFileObject);
            await filesInFolderChanged.InvokeAsync();
        }
    }
}
