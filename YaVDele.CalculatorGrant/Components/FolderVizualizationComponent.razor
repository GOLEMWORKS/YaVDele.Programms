@inject FileUpload fileUpload
@inject FileLogic fileLogic

<div class="input-group input-group-sm md-3">
    <div class="btn-group">
        <button class="btn btn-danger"
                type="button"
                @onclick="@((args) => DeleteSelectedFile())"
                >
            <i class="oi oi-trash"></i>
            Удалить
        </button>
        <button class="btn btn-success"
                type="button">
            <i class="oi oi-book"></i>
            Читать
        </button>
        <button class="btn btn-success"
                type="button"
                @onclick="@((args) => ConvertToExel())">
            <i class="oi oi-arrow-circle-top"></i>
            В Excel
        </button>
        <button class="btn btn-success"
                type="button">
            <i class="oi oi-share"></i>
            Поделиться
        </button>
    </div>

    <i></i>
</div>

<div style="overflow-y: auto; max-height: 300px; border: 1px solid silver; margin-top: 8px;">
    <ul style="list-style-type:none">
        @foreach (var item in GetFilesInFolder())
        {
            <li 
            class="li-select-file"
            tabindex="1"
            @onfocus="@((args) => SelectFile(item))">@item.FileName</li>
        }
    </ul>
</div>

@selectedFileObject
<div style="height: 100%;" @onclick="@sfo"></div>
@code {
    [Parameter]
    [EditorRequired]
    public string uploadDirectory { get; set; }

    [Parameter]
    public List<FileObject> filesInFolder { get; set; }

    [Parameter]
    public EventCallback<List<FileObject>> filesInFolderChanged { get; set; }

    FileObject selectedFileObject = null;

    public void sfo()
    {
        selectedFileObject = null;
    }

    public List<FileObject> GetFilesInFolder()
    {
        List<FileObject> filesInFolder = fileUpload.GetFilesList();
        return filesInFolder;
    }

    void SelectFile(FileObject file)
    {
        selectedFileObject = new FileObject{
                FileName = file.FileName,
                FilePath = file.FilePath,
                FileExtension = file.FileExtension
        };
    }

    async Task DeleteSelectedFile()
    {
        if (selectedFileObject != null)
        {
            fileLogic.FileDelete(selectedFileObject);
            await filesInFolderChanged.InvokeAsync();
        }
    }

    async Task ConvertToExel()
    {
        if (selectedFileObject != null)
        {
            fileLogic.FileReadAsTable(selectedFileObject);
            await filesInFolderChanged.InvokeAsync();
        }
    }
}
