@inject FolderVisualisation folderVisualisation
@inject FileUpload fileUpload
@inject FileLogic fileLogic

<h3>Folder Vizualization Component</h3>
<h3>current directory: @uploadDirectory</h3>

<div class="input-group input-group-sm mb-3">
    <div class="btn-group">
        <button class="btn btn-outline-danger"
                type="button"
                onclick="@DeleteFile(SelectedFile)">
            <i class="oi oi-trash"></i>
            Удалить
        </button>
        <button class="btn btn-outline-success"
                type="button">
            <i class="oi oi-book"></i>
            Прочитать
        </button>
        <button class="btn btn-outline-primary"
                type="button">
            <i class="oi oi"></i>
            В Exel
        </button>
    </div>

    <i>@SelectedFile</i>
</div>

<div style="overflow-y: auto; max-height: 300px; border: 1px solid silver; padding-top: 3px;">
    <ul style="list-style-type:none">
        @foreach (var item in filesInFolders)
        {
            <li 
            class="li-select-file"
            tabindex="1"
            @onclick="@(async() => {await SelectFile(item); })">@item</li>
        }
    </ul>
</div>


@code {


    [Parameter]
    [EditorRequired]
    public string uploadDirectory { get; set; }

    [Parameter]
    [EditorRequired]
    public string filesInFolder { get; set; }

    [Parameter]
    public EventCallback<string> OnSelectFileName { get; set; }

    private string? SelectedFile;

    IEnumerable<string> filesInFolders;

    protected override async Task OnParametersSetAsync() => await getFilesInDirectory();

    public async Task getFilesInDirectory() =>  filesInFolders = folderVisualisation.FileNamesInFolder(uploadDirectory);

    private async Task SelectFile(string fileName)
    {
        await OnSelectFileName.InvokeAsync(fileName);
        SelectedFile = fileName;
    }

    async Task DeleteFile(string selectedFile)
    {
        if (selectedFile != null)
        {
            fileLogic.FileDelete(selectedFile);
            this.StateHasChanged();  
        }
        
    }
}
